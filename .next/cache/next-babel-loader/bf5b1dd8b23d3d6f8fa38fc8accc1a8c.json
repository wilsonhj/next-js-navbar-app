{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _jsxFileName = \"/Users/pandoras.box/Developer/React_Apps/next-js/pages/_app.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n// import React from 'react';\n// import App, { Container } from 'next/app';\n// import Navbar from '../components/Navbar';\n// class MyApp extends App {\n//   static async getInitialProps({ Component, ctx }) {\n//     let pageProps = {};\n//     if (Component.getInitialProps){\n//       pageProps = await Component.getInitialProps(ctx);\n//     }\n//     return { pageProps };\n//   }\n//   render() { \n//     const { Component, pageProps } = this.props;\n//     return ( \n//       <Container>\n//         <Navbar></Navbar>\n//         <Component {...pageProps} />\n//         <h1>Fotter</h1>\n//       </Container>\n//     );\n//   }\n// }\n// export default MyApp;\nimport App from 'next/app';\nimport moduleName from '../components/Navbar';\n\nfunction MyApp(_ref) {\n  var Component = _ref.Component,\n      pageProps = _ref.pageProps;\n  return __jsx(Navbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }\n  }, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }, \"p function _app\"), __jsx(Component, _extends({}, pageProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  })));\n} // Only uncomment this method if you have blocking data requirements for\n// every single page in your application. This disables the ability to\n// perform automatic static optimization, causing every page in your app to\n// be server-side rendered.\n// MyApp.getInitialProps = async (appContext) => {\n//   // calls page's `getInitialProps` and fills `appProps.pageProps`\n//   const appProps = await App.getInitialProps(appContext);\n//   return { ...appProps }\n// }\n\n\n_c = MyApp;\nexport default MyApp;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyApp\");","map":{"version":3,"sources":["/Users/pandoras.box/Developer/React_Apps/next-js/pages/_app.js"],"names":["App","moduleName","MyApp","Component","pageProps"],"mappings":";;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA,OAAOA,GAAP,MAAgB,UAAhB;AACA,OAAOC,UAAP,MAAuB,sBAAvB;;AAEA,SAASC,KAAT,OAAyC;AAAA,MAAxBC,SAAwB,QAAxBA,SAAwB;AAAA,MAAbC,SAAa,QAAbA,SAAa;AACvC,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,EAEE,MAAC,SAAD,eAAeA,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFF,CADF;AAMD,C,CAED;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;;;KAnBSF,K;AAqBT,eAAeA,KAAf","sourcesContent":["// import React from 'react';\n// import App, { Container } from 'next/app';\n// import Navbar from '../components/Navbar';\n\n// class MyApp extends App {\n//   static async getInitialProps({ Component, ctx }) {\n//     let pageProps = {};\n//     if (Component.getInitialProps){\n//       pageProps = await Component.getInitialProps(ctx);\n//     }\n//     return { pageProps };\n//   }\n//   render() { \n//     const { Component, pageProps } = this.props;\n//     return ( \n//       <Container>\n//         <Navbar></Navbar>\n//         <Component {...pageProps} />\n//         <h1>Fotter</h1>\n//       </Container>\n//     );\n//   }\n// }\n\n// export default MyApp;\n\n\n\n\nimport App from 'next/app';\nimport moduleName from '../components/Navbar';\n\nfunction MyApp({ Component, pageProps }) {\n  return (\n    <Navbar>\n      <p>p function _app</p>\n      <Component {...pageProps} />\n    </Navbar>\n  )\n}\n\n// Only uncomment this method if you have blocking data requirements for\n// every single page in your application. This disables the ability to\n// perform automatic static optimization, causing every page in your app to\n// be server-side rendered.\n\n// MyApp.getInitialProps = async (appContext) => {\n//   // calls page's `getInitialProps` and fills `appProps.pageProps`\n//   const appProps = await App.getInitialProps(appContext);\n\n//   return { ...appProps }\n// }\n\nexport default MyApp;"]},"metadata":{},"sourceType":"module"}